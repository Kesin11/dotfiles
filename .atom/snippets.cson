# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it here:
# https://github.com/bevry/cson#what-is-cson

# 増えてきたら自作パッケージを作って外出ししていく
".source.js":
  ## class(es6)
  "class":
    prefix: "class"
    body: """
    class ${1:name} {
    \tconstructor(${2:arguments}) {
    \t\t${0}
    \t}
    }
    """
  "class extends":
    prefix: "class-extends"
    body: """
    class ${1:name} extends ${2:base} {
    \tconstructor(${3:arguments}) {
    \t\tsuper(${3:arguments})
    \t\t${0}
    \t}
    }
    """
  "class function":
    prefix: "class-function"
    body: """
    ${1:name} (${2:arguments}) {
    \t${0}
    }
    """
  # console
  "console.log":
    prefix: "clog"
    body: "console.log(${0});"
  "console.error":
    prefix: "cerror"
    body: "console.error(${0});"
  "console.warn":
    prefix: "cwarn"
    body: "console.warn(${0});"
  "console.trace":
    prefix: "ctrace"
    body: "console.trace();"
  # flow-control
  "if statement":
    prefix: "if"
    body: """
    if (${1:condition}) {
    \t${2}
    }
    """
  "if/else statement":
    prefix: "ife"
    body: """
    if (${1:condition}) {
    \t${2}
    }
    else {
    \t${3}
    }
    """
  "else if statement":
    prefix: "elseif"
    body: """
    else if (${1:condition}) {
    \t${2}
    }
    """
  "for of loop":
    prefix: "forof"
    body: """
    for (let ${1:key} of ${2:source}) {
    \t${3}
    }
    """
  "while loop":
    prefix: "while"
    body: """
    while (${1:condition}) {
    \t${2}
    }
    """
  # function
  "anonymous function":
    prefix: "func"
    body: "function (${1:arguments}) {${0}}"
  "named function":
    prefix: "fn"
    body: """
    function ${1:name}(${2:arguments}) {
    \t${0}
    }
    """
  "arrow function":
    prefix: "func-arrow(es6)"
    body: """
    (${1:arguments}) => ${2:statement}
    """
  "arrow function with body":
    prefix: "func-arrow-bodry(es6)"
    body: """
    (${1:arguments}) => {
    \t${0}
    }
    """
  # iterable
  "forEach":
    prefix: "foreach"
    body: "forEach((${1:item}) => {${0}})"
  "map":
    prefix: "map"
    body: "map((${1:item}) => {${0}})"
  "reduce":
    prefix: "reduce"
    body: "reduce((${1:p}, ${2:c}) => {${0}}${4:, initial})"
  "filter":
    prefix: "filter"
    body: "filter((${1:item}) => {${0}})"
  "find":
    prefix: "find"
    body: "find((${1:item}) => {${0}})"
  # module
  "require":
    prefix: "require"
    body: """require("${1:module}");"""
  "const-require(es6)":
    prefix: "const_require"
    body: """const ${1:module} = require("${2:path}");"""
  "module.exports":
    prefix: "module-exports"
    body: """
      module.exports = {
        ${1:name}
      };
    """
  # timers
  "setTimeout":
    prefix: "st"
    body: """
    setTimeout(() => {
    \t${0}
    }, ${1:delay});
    """
  "setInterval":
    prefix: "si"
    body: """
    setInterval(() => {
    \t${0}
    }, ${1:delay});
    """
  "setImmediate":
    prefix: "sim"
    body: """
    setImmediate(() => {
    \t${0}
    });
    """
